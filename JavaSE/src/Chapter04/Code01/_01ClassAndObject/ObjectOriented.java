package Chapter04.Code01._01ClassAndObject;

import java.util.Arrays;

/**
 * 面向对象思想总结:
 * 1.面向过程:当要实现一个功能时,需要亲力亲为,处理每个细节
 * 2.面向对象:当要实现一个功能时,不关心具体的实现步骤,只关心结果,找一个具有该功能的类,帮我们做事
 * 3.面向对象的思想
 * (1)面向对象是基于面向过程的编程思想.
 * (2)面向过程:强调的是每一个功能的步骤
 * (3)面向对象:强调的是对象,然后由对象去调用功能
 * 4.特点
 * (1)是一种更符合我们思考习惯的思想
 * (2)可以将复杂的事情简单化
 * (3)角色发生了转换,将我们从执行者变成了指挥者
 * <p>
 * 定义的一个名称为Student的类,用来描述学生事物,相当于模板/模型/图纸,
 * 不能直接使用,要想使用,必须根据模板/模型/图纸创建一个具体的对象才可以使用.
 * <p>
 * 类是一种引用数据类型,使用有3个步骤
 * 1.导包(找到要使用的类):
 * java.lang包下的内容可以直接使用,不需要导包
 * 导包格式: import xxx.xxx.类名;
 * 快捷键: alt + 回车
 * 注意:
 * 当前的类和要使用的类在同一个包中,不需要导包
 * <p>
 * 2.创建对象:
 * 数组对象的创建:
 * 数据类型[] 数组名称 = new 数据类型[3];
 * int[] array = new int[3];
 * array[0],array[1],array[2]
 * sout(array[0]);
 * array[0] = 100;
 * <p>
 * 类的对象的创建:
 * 类名 对象名 = new 类名();
 * <p>
 * 3.对象的使用:
 * (1)对象名称: 对象在内存空间的地址值
 * (2)成员变量的使用格式:
 * 对象名称.成员变量名称
 * 比如:
 * stu.name: 对象的name属性值
 * <p>
 * (3)成员方法的使用格式:
 * 对象名称.成员方法名称(...);
 * 比如:
 * stu.eat(): 调用对象stu的eat方法
 * 总结:
 * 点(.): 理解为xxx的yyy
 * <p>
 * 4.注意:
 * 对象的成员变量有默认初始化值
 * (1)基本类型
 * 整数(byte/short/int/long):    0
 * 小数(float/double):           0.0
 * 布尔(boolean):                false
 * 字符(char):                   空白字符
 * (2)引用类型         null
 * <p>
 * 定义Student类,用来模拟学生事物
 * 分析,学生事物有两部分组成
 * 1.属性(名词): 姓名,性别,年龄
 * 2.行为(动词): 吃饭,睡觉,学习
 * <p>
 * 对应到java的类中,也有两部分组成
 * 1.成员变量(属性,名词):
 * 姓名: String name
 * 性别: String gender
 * 年龄: int age
 * 2.成员方法(行为,动词)
 * 吃饭: eat()
 * 睡觉: sleep()
 * 学习: study()
 * 类的定义格式:
 * public class 类名 {
 * //成员变量
 * //成员方法
 * }
 * <p>
 * 注意: class是定义类的关键字,class后面的名称,叫做类名
 * <p>
 * 注意:
 * 1.成员变量: 和以前定义变量的格式相同,只是位置发生了改变,成员变量定义在类中方法外
 * 以前在方法内部定义的变量,叫做局部变量
 * 2.成员方法: 和以前定义方法的格式相同,只是需要去掉static关键字
 * <p>
 * 引用变量保存的是地址值,向外传递的也是地址值
 * 1.引用类型变量存储对象的地址值
 * 2.向外传递的也是对象的地址值
 * 3.只要获取到对象的地址值,就可以找到该地址对应的内存空间,
 * 从而操作内存空间中的内容
 * <p>
 * 成员变量和局部变量区别
 * 1.初始化值的不同【重点】
 * 成员变量：有默认值
 * 局部变量：没有默认值。必须先定义，赋值，最后使用
 * 局部变量: 在定义/声明方法的时候()中定义的变量,或者在方法内部定义的变量
 * <p>
 * 2.在类中的位置不同【重点】
 * 成员变量：类中，方法外
 * 局部变量：方法中或者方法声明上(形式参数)
 * <p>
 * 3.作用范围不一样【重点】
 * 成员变量：类中
 * 局部变量：方法中
 * <p>
 * 4.在内存中的位置不同（了解）
 * 成员变量：堆内存 局部变量：栈内存
 * <p>
 * 5.生命周期不同（了解）
 * 成员变量：随着对象的创建而存在，随着对象的消失而消失
 * 局部变量：随着方法的调用而存在，随着方法的调用完毕而消失
 */
public class ObjectOriented {
    public static void main(String[] args) {
        //定义数组
        int[] array = {11, 22, 33, 44, 55};

        /**
         * 面向过程: 所有的细节都需要处理,必须亲力亲为
         * 打印格式: [11, 22, 33, 44, 55]
         */
        //1.打印"[",不换行
        System.out.print("[");
        //2.打印元素
        for (int i = 0; i < array.length; i++) {
            //2.1打印元素
            System.out.print(array[i]);
            //2.2 不是最后一个元素,打印", "
            if (i != array.length - 1) {
                System.out.print(", ");
            }
        }
        //3.打印"]",换行
        System.out.println("]");
        System.out.println("--------------------");

        /**
         * 面向对象:
         *    找个具有该功能的事物(对象),帮助我们完成功能,不关心具体如何实现,只关心结果
         *    java中有个类Arrays,里面有个方法
         *    public static String toString(int[] arr):获取int数组对应的字符串
         *    如果需要打印数组的字符串形式,直接调用即可
         */
        System.out.println(Arrays.toString(array));
    }
}
